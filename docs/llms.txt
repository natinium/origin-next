# Next.js Boilerplate Description

This Next.js boilerplate provides a solid foundation for building modern web applications. It includes essential tools and configurations to streamline development and ensure best practices.

## Key Features:

-   **Next.js:** Utilizes the power of Next.js for server-side rendering, static site generation, and optimized performance.
-   **TypeScript:** Enforces type safety and improves code maintainability with TypeScript.
-   **ESLint:** Configured with recommended rules and best practices for clean and consistent JavaScript/TypeScript code.
-   **Prettier:** Automatically formats code to maintain a consistent style throughout the project.
-   **Stylelint:** Lints CSS and SCSS files to enforce consistent styling and prevent errors.
-   **Tailwind CSS:** A utility-first CSS framework for rapid UI development.
-   **Lucide React:** Beautifully simple, pixel-perfect icons from Lucide.
-   **next-themes:** Easily switch between light and dark themes.
-   **Vitest:** A fast and modern unit testing framework.
-   **Playwright:** End-to-end testing for reliable and robust applications.
-   **Husky:** Git hooks to automate tasks like linting and formatting before commits.
-   **lint-staged:** Run linters on staged files to ensure code quality.

## How-To Guides:

### Adding a New Component:

1.  Create a new file in the `src/components` directory (e.g., `src/components/MyComponent.tsx`).
2.  Follow the component rule: all components should be pure functional arrow functions with direct props destructuring.

    ```typescript
    const MyComponent = ({ prop1, prop2 }: { prop1: string; prop2: number }) => {
      return (
        <div>
          {prop1} - {prop2}
        </div>
      );
    };

    export default MyComponent;
    ```
3.  Import and use the component in your desired page or component.

### Adding a New Page:

1.  Create a new file in the `src/app` directory (e.g., `src/app/my-page/page.tsx`).
2.  Define a React component as the default export.

    ```typescript
    const MyPage = () => {
      return (
        <div>
          <h1>My Page</h1>
        </div>
      );
    };

    export default MyPage;
    ```
3.  Access the page by navigating to `/my-page`.

### Running Tests:

-   **Unit Tests:** Run `yarn test` to execute unit tests with Vitest.
-   **End-to-End Tests:** Run `yarn test:e2e` to execute end-to-end tests with Playwright.

## Component Rule:

All components should always be pure functional arrow functions with direct props destructuring. This ensures consistency, readability, and maintainability.

**Example:**

```typescript
const MyComponent = ({ prop1, prop2 }: { prop1: string; prop2: number }) => {
  return (
    <div>
      {prop1} - {prop2}
    </div>
  );
};

export default MyComponent;
```

This boilerplate is designed to be robust and scalable, providing a solid foundation for building high-quality Next.js applications.

## Project Structure:

```
src/
├── app/             # Next.js app directory for routing and pages
│   ├── api/         # API routes
│   │   └── ...
│   ├── layout.tsx   # Root layout for the entire application
│   ├── page.tsx     # Home page
│   └── ...
├── components/      # Reusable UI components
│   ├── ui/          # Primitive UI components (buttons, inputs, etc.)
│   │   └── ...
│   ├── shared/      # Shared components used across multiple features
│   │   └── ...
│   └── feature/     # Feature-specific components
│       └── ...
├── contexts/        # React contexts for managing global state
│   └── ...
├── hooks/           # Custom React hooks
│   └── ...
├── lib/             # Utility functions and helper modules
│   ├── utils.ts     # General utility functions
│   ├── api.ts       # API client
│   └── ...
├── styles/          # Global styles and CSS modules
│   ├── globals.scss # Global styles
│   └── ...
├── types/           # TypeScript type definitions
│   └── ...
└── utils/           # Utility functions and helper modules
    └── ...
